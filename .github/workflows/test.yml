name: Linting & Test

on:
  push:
    paths:
      - src/**
      - tests/**
      - pyproject.toml
      - uv.lock
      - CHANGELOG.md
      - .github/workflows/test.yml

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - run: uv sync --all-extras --dev
      - name: ruff check
        run: uv run ruff check src
      - name: ruff format
        run: uv run ruff format --check src

  version:
    name: Test Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Versions
        id: version
        run: |
          version_project="$(grep --color=never 'version *= *".*"' pyproject.toml)"
          version_project="${version_project%\"}"
          version_project="${version_project#*\"}"
          echo "version_project=$version_project" >> "$GITHUB_OUTPUT"
          
          version_package="$(grep --color=never '__version__ *= *".*"' src/*/__version__.py)"
          version_package="${version_package%\"}"
          version_package="${version_package#*\"}"
          echo "version_package=$version_package" >> "$GITHUB_OUTPUT"
      - name: Test Package and Project Version Match
        env:
          version_project: ${{ steps.version.outputs.version_project }}
          version_package: ${{ steps.version.outputs.version_package }}
        run: test "$version_project" = "$version_package" || exit $?
      - name: Test Version in CHANGELOG.md
        env:
          version_project: ${{ steps.version.outputs.version_project }}
        run: grep -E "## v$version_project"'( .*)?$' CHANGELOG.md || exit $?

  version-acacore:
    name: Test acacore Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Fetch Acacore Version
        run: |
          acacore_remote="$(python -c 'import urllib.request,json;print(json.loads(urllib.request.urlopen("https://api.github.com/repos/aarhusstadsarkiv/acacore/tags").read())[0]["name"])')"
          acacore_remote="${acacore_remote#v}"
          acacore_package="$(grep 'acacore =' pyproject.toml | grep -oE 'tag[ ]*=[ ]*"[^"]+"')"
          acacore_package="${acacore_package#*\"}"
          acacore_package="${acacore_package#v}"
          acacore_package="${acacore_package%\"}"
          test "$acacore_remote" = "$acacore_package"

  version-database:
    name: Test Database version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test database version
        run: |
          acacore_database="$(sqlite3 tests/AVID/_metadata/avid.db "select value from Metadata where key = 'version'")"
          acacore_database="${acacore_database#*\"}"
          acacore_database="${acacore_database#v}"
          acacore_database="${acacore_database%\"}"
          acacore_package="$(grep 'acacore =' pyproject.toml | grep -oE 'tag[ ]*=[ ]*"[^"]+"')"
          acacore_package="${acacore_package#*\"}"
          acacore_package="${acacore_package#v}"
          acacore_package="${acacore_package%\"}"
          test "$acacore_database" = "$acacore_package"

  pytest:
    name: pytest
    needs: version-database
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - uses: actions/setup-go@v5
      - run: uv sync --all-extras --dev
      - run: go install github.com/richardlehane/siegfried/cmd/sf@latest
      - name: Unit test
        env:
          GOPATH: /home/runner/go
        run: uv run coverage run -m pytest
      - name: Coverage
        run: uv run coverage report -m --fail-under=80 --skip-empty --skip-covered
